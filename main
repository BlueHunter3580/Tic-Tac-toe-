<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tic Tac Toe against Computer</title>
    <style>
        table {
            border-collapse: collapse;
            margin: 20px auto;
        }
        td {
            border: 1px solid black;
            width: 50px;
            height: 50px;
            text-align: center;
            font-size: 36px;
            cursor: pointer;
        }
        h1 {
            text-align: center;
        }
        #reset-btn {
            display: none;
            margin: 20px auto;
            padding: 10px 20px;
            font-size: 18px;
            cursor: pointer;
        }
    </style>
</head>
<body>
    <h1>Tic Tac Toe against Computer</h1>

    <!-- Player's symbol selection -->
    <div id="symbol-selection" style="text-align: center;">
        <button onclick="chooseSymbol('X')">Play as X</button>
        <button onclick="chooseSymbol('O')">Play as O</button>
    </div>

    <!-- Game board -->
    <table id="game-board" style="display:none;">
        <tr>
            <td id="cell-1" onclick="makeMove(this)">*</td>
            <td id="cell-2" onclick="makeMove(this)">*</td>
            <td id="cell-3" onclick="makeMove(this)">*</td>
        </tr>
        <tr>
            <td id="cell-4" onclick="makeMove(this)">*</td>
            <td id="cell-5" onclick="makeMove(this)">*</td>
            <td id="cell-6" onclick="makeMove(this)">*</td>
        </tr>
        <tr>
            <td id="cell-7" onclick="makeMove(this)">*</td>
            <td id="cell-8" onclick="makeMove(this)">*</td>
            <td id="cell-9" onclick="makeMove(this)">*</td>
        </tr>
    </table>

    <!-- Reset button -->
    <button id="reset-btn" onclick="resetGame()">Reset Game</button>

    <script>
        let computerSymbol = "O";
        let playerSymbol = "X";
        let gameBoard = document.getElementById("game-board");
        let cells = gameBoard.getElementsByTagName("td");
        let currentPlayer;
        let resetButton = document.getElementById("reset-btn");
        let symbolSelectionDiv = document.getElementById("symbol-selection");

        // Choose the player's symbol
        function chooseSymbol(symbol) {
            playerSymbol = symbol;
            computerSymbol = (symbol === "X") ? "O" : "X"; // Opposite of the player's choice
            symbolSelectionDiv.style.display = "none"; // Hide symbol selection
            gameBoard.style.display = "table"; // Show game board
            currentPlayer = playerSymbol; // Player starts the game
            resetGame();
        }

        // Make move for the player
        function makeMove(cell) {
            if (cell.innerText === "*" && currentPlayer === playerSymbol) {
                cell.innerText = playerSymbol;
                currentPlayer = computerSymbol;
                checkWinner();
                if (!isGameOver()) {
                    computerMove();
                }
            } else {
                alert("Wait for the computer's move!");
            }
        }

        // Computer's move
        function computerMove() {
            setTimeout(() => {
                let availableCells = [];
                for (let cell of cells) {
                    if (cell.innerText === "*") {
                        availableCells.push(cell);
                    }
                }
                let randomIndex = Math.floor(Math.random() * availableCells.length);
                let computerCell = availableCells[randomIndex];
                computerCell.innerText = computerSymbol;
                checkWinner();
                currentPlayer = playerSymbol;
            }, 1000);
        }

        // Check for a winner or draw
        function checkWinner() {
            let winningCombinations = [
                [1, 2, 3],
                [4, 5, 6],
                [7, 8, 9],
                [1, 4, 7],
                [2, 5, 8],
                [3, 6, 9],
                [1, 5, 9],
                [3, 5, 7]
            ];

            // Check each combination
            for (let combo of winningCombinations) {
                let cell1 = document.getElementById(`cell-${combo[0]}`);
                let cell2 = document.getElementById(`cell-${combo[1]}`);
                let cell3 = document.getElementById(`cell-${combo[2]}`);

                if (cell1.innerText === cell2.innerText && cell2.innerText === cell3.innerText && cell1.innerText !== "*") {
                    if (cell1.innerText === playerSymbol) {
                        alert("You win!");
                    } else {
                        alert("Computer wins!");
                    }
                    resetGame();
                    return;
                }
            }

            // Check for draw condition
            if (isGameOver()) {
                alert("It's a draw!");
                resetButton.style.display = "inline"; // Show the reset button
            }
        }

        // Check if the game is over (either draw or all cells filled)
        function isGameOver() {
            for (let cell of cells) {
                if (cell.innerText === "*") {
                    return false;
                }
            }
            return true; // All cells are filled, so it's a draw
        }

        // Reset the game board for a new game
        function resetGame() {
            for (let cell of cells) {
                cell.innerText = "*";
            }
            currentPlayer = playerSymbol; // Player starts again
            resetButton.style.display = "none"; // Hide the reset button until needed
        }
    </script>
</body>
</html>
